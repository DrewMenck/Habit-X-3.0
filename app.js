// Same app logic as before, omitted here for brevity in this snippet.
// (The full habits, streaks, bulk add, export/import, calendar 'X' rendering are present below.)
let deferredPrompt=null;
const installBtn=document.getElementById('installBtn');
if(installBtn){window.addEventListener('beforeinstallprompt',e=>{e.preventDefault();deferredPrompt=e;installBtn.style.display='inline-block'});installBtn.addEventListener('click',async()=>{if(!deferredPrompt)return;deferredPrompt.prompt();await deferredPrompt.userChoice;deferredPrompt=null;installBtn.style.display='none'})}
if('serviceWorker'in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('./sw.js')})}
// Date helpers
function localYMD(date){const d=new Date(date.getFullYear(),date.getMonth(),date.getDate());const y=d.getFullYear();const m=String(d.getMonth()+1).padStart(2,'0');const da=String(d.getDate()).padStart(2,'0');return `${y}-${m}-${da}`}
function addDays(d,n){const x=new Date(d);x.setDate(x.getDate()+n);return x}
function startOfMonth(d){return new Date(d.getFullYear(),d.getMonth(),1)}
function endOfMonth(d){return new Date(d.getFullYear(),d.getMonth()+1,0)}
function sameDay(a,b){return a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()===b.getDate()}
// DB
const DB_NAME='habitx-db',DB_VERSION=1,STORE_HABITS='habits',STORE_MARKS='marks';
function openDB(){return new Promise((resolve,reject)=>{const req=indexedDB.open(DB_NAME,DB_VERSION);req.onupgradeneeded=()=>{const db=req.result;if(!db.objectStoreNames.contains(STORE_HABITS)){const s=db.createObjectStore(STORE_HABITS,{keyPath:'id'});s.createIndex('byCreated','created')}if(!db.objectStoreNames.contains(STORE_MARKS)){db.createObjectStore(STORE_MARKS)}};req.onsuccess=()=>resolve(req.result);req.onerror=()=>reject(req.error)})}
async function dbGetAll(store){const db=await openDB();return new Promise((resolve,reject)=>{const tx=db.transaction(store,'readonly');const s=tx.objectStore(store);const req=s.getAll();req.onsuccess=()=>resolve(req.result||[]);req.onerror=()=>reject(req.error)})}
async function dbPut(store,value,key){const db=await openDB();return new Promise((resolve,reject)=>{const tx=db.transaction(store,'readwrite');const s=tx.objectStore(store);const req=key?s.put(value,key):s.put(value);req.onsuccess=()=>resolve(true);req.onerror=()=>reject(req.error)})}
async function dbDel(store,key){const db=await openDB();return new Promise((resolve,reject)=>{const tx=db.transaction(store,'readwrite');const s=tx.objectStore(store);const req=s.delete(key);req.onsuccess=()=>resolve(true);req.onerror=()=>reject(req.error)})}
async function dbKeysWithPrefix(prefix){const db=await openDB();return new Promise((resolve,reject)=>{const tx=db.transaction(STORE_MARKS,'readonly');const s=tx.objectStore(STORE_MARKS);const req=s.getAllKeys();req.onsuccess=()=>{const keys=(req.result||[]).filter(k=>typeof k==='string'&&k.startsWith(prefix));resolve(keys)};req.onerror=()=>reject(req.error)})}
// State
let habits=[],currentHabitId=null,viewMonth=new Date();
const elHabitSelect=document.getElementById('habitSelect'),elAddHabitBtn=document.getElementById('addHabitBtn'),elBulkAddBtn=document.getElementById('bulkAddBtn'),elHabitDialog=document.getElementById('habitDialog'),elHabitForm=document.getElementById('habitForm'),elBulkDialog=document.getElementById('bulkDialog'),elBulkForm=document.getElementById('bulkForm'),elMonthLabel=document.getElementById('monthLabel'),elCalendar=document.getElementById('calendarGrid'),elCur=document.getElementById('currentStreak'),elLong=document.getElementById('longestStreak'),elPct=document.getElementById('completionPct'),elScore=document.getElementById('habitScore'),elExport=document.getElementById('exportBtn'),elImport=document.getElementById('importFile'),elDeleteHabit=document.getElementById('deleteHabitBtn');
document.getElementById('prevMonth').addEventListener('click',()=>{viewMonth=new Date(viewMonth.getFullYear(),viewMonth.getMonth()-1,1);renderCalendar()});
document.getElementById('nextMonth').addEventListener('click',()=>{viewMonth=new Date(viewMonth.getFullYear(),viewMonth.getMonth()+1,1);renderCalendar()});
(async function init(){habits=await dbGetAll(STORE_HABITS);if(habits.length===0){const id=crypto.randomUUID();const sample={id,name:'Read 20 min',emoji:'ðŸ“š',color:'#ff9800',created:Date.now()};await dbPut(STORE_HABITS,sample);habits=[sample]}currentHabitId=habits[0].id;renderHabitSelect();render()})();
function renderHabitSelect(){elHabitSelect.innerHTML='';for(const h of habits){const opt=document.createElement('option');opt.value=h.id;opt.textContent=`${h.emoji||'â€¢'} ${h.name}`;elHabitSelect.appendChild(opt)}elHabitSelect.value=currentHabitId}
elHabitSelect.addEventListener('change',()=>{currentHabitId=elHabitSelect.value;render()});
elAddHabitBtn.addEventListener('click',()=>{elHabitDialog.showModal();setTimeout(()=>document.getElementById('habitName').focus(),50)});
elHabitForm.addEventListener('submit',async e=>{e.preventDefault();const name=document.getElementById('habitName').value.trim();if(!name)return;const emoji=document.getElementById('habitEmoji').value.trim();const color=document.getElementById('habitColor').value;const h={id:crypto.randomUUID(),name,emoji,color,created:Date.now()};await dbPut(STORE_HABITS,h);habits.push(h);currentHabitId=h.id;renderHabitSelect();elHabitDialog.close();elHabitForm.reset();render()});
elBulkAddBtn.addEventListener('click',()=>{elBulkDialog.showModal();setTimeout(()=>document.getElementById('bulkText').focus(),50)});
elBulkForm.addEventListener('submit',async e=>{e.preventDefault();const raw=document.getElementById('bulkText').value;const lines=raw.split(/[\r\n]+/).map(s=>s.trim()).filter(Boolean);if(lines.length===0){elBulkDialog.close();return}let lastNewId=null;for(const line of lines){const colorMatch=line.match(/#([0-9a-fA-F]{6})\b/);const color=colorMatch?'#'+colorMatch[1]:'#ff9800';const noColor=colorMatch?line.replace(colorMatch[0],'').trim():line;let emoji='';let name=noColor;const g=Array.from(noColor)[0]||'';if(g&&/\p{Extended_Pictographic}/u.test(g)){emoji=g;name=noColor.slice(g.length).trim()}if(!name)name=noColor;const h={id:crypto.randomUUID(),name,emoji,color,created:Date.now()};await dbPut(STORE_HABITS,h);habits.push(h);lastNewId=h.id}if(lastNewId)currentHabitId=lastNewId;renderHabitSelect();elBulkDialog.close();document.getElementById('bulkText').value='';render()});
elDeleteHabit.addEventListener('click',async()=>{if(!currentHabitId)return;if(!confirm('Delete this habit and all its history?'))return;await dbDel(STORE_HABITS,currentHabitId);const keys=await dbKeysWithPrefix(currentHabitId+'|');for(const k of keys){await dbDel(STORE_MARKS,k)}habits=habits.filter(h=>h.id!==currentHabitId);if(habits.length===0){currentHabitId=null;elCalendar.innerHTML='<p class="fine">No habits yet. Add one!</p>';elHabitSelect.innerHTML='';return}currentHabitId=habits[0].id;renderHabitSelect();render()});
elExport.addEventListener('click',async()=>{const data={habits:await dbGetAll(STORE_HABITS),marks:{}};for(const h of data.habits){const keys=await dbKeysWithPrefix(h.id+'|');const dates=[];for(const k of keys){dates.push(k.split('|')[1])}data.marks[h.id]=dates}const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='habitx-backup.json';a.click();URL.revokeObjectURL(url)});
document.getElementById('importFile').addEventListener('change',async e=>{const file=e.target.files[0];if(!file)return;const txt=await file.text();try{const data=JSON.parse(txt);if(Array.isArray(data.habits)){for(const h of data.habits){await dbPut(STORE_HABITS,h)}if(data.marks){for(const[hid,dates]of Object.entries(data.marks)){for(const d of dates){await dbPut(STORE_MARKS,true,`${hid}|${d}`)}}}habits=await dbGetAll(STORE_HABITS);if(habits.length)currentHabitId=habits[0].id;renderHabitSelect();render();alert('Import complete.')}}catch(err){alert('Import failed: '+err.message)}finally{e.target.value=''}});
async function render(){await renderCalendar();await renderStats()}
async function renderCalendar(){if(!currentHabitId)return;const h=habits.find(x=>x.id===currentHabitId);const first=startOfMonth(viewMonth),last=endOfMonth(viewMonth),startIdx=first.getDay(),totalDays=last.getDate(),today=new Date();document.getElementById('monthLabel').textContent=new Intl.DateTimeFormat(undefined,{month:'long',year:'numeric'}).format(viewMonth);const prefix=h.id+'|';const keys=await dbKeysWithPrefix(prefix);const marked=new Set(keys.map(k=>k.split('|')[1]));const elCalendar=document.getElementById('calendarGrid');elCalendar.innerHTML='';for(let i=0;i<startIdx;i++){const pad=document.createElement('div');pad.className='day inactive';elCalendar.appendChild(pad)}for(let day=1;day<=totalDays;day++){const d=new Date(viewMonth.getFullYear(),viewMonth.getMonth(),day);const dStr=localYMD(d);const cell=document.createElement('div');cell.className='day';if(sameDay(today,d))cell.classList.add('today');const num=document.createElement('div');num.className='num';num.textContent=String(day);cell.appendChild(num);const x=document.createElement('div');x.className='x';cell.appendChild(x);const btn=document.createElement('button');btn.setAttribute('aria-label',`Toggle completion for ${dStr}`);btn.addEventListener('click',async()=>{const key=`${h.id}|${dStr}`;const isComplete=marked.has(dStr);if(isComplete){await dbDel(STORE_MARKS,key);marked.delete(dStr);cell.classList.remove('complete');x.classList.remove('draw')}else{await dbPut(STORE_MARKS,true,key);marked.add(dStr);cell.classList.add('complete');x.classList.remove('draw');void x.offsetWidth;x.classList.add('draw')}renderStats()});cell.appendChild(btn);if(marked.has(dStr)){cell.classList.add('complete');x.classList.add('draw')}elCalendar.appendChild(cell)}}
async function renderStats(){if(!currentHabitId){elCur.textContent='0';elLong.textContent='0';elPct.textContent='0%';elScore.textContent='0';return}const h=habits.find(x=>x.id===currentHabitId);const keys=await dbKeysWithPrefix(h.id+'|');const dates=keys.map(k=>k.split('|')[1]).sort();const set=new Set(dates);let cur=0;let ptr=new Date();while(set.has(localYMD(ptr))){cur+=1;ptr=addDays(ptr,-1)}let longest=0;const visited=new Set();for(const ds of dates){if(visited.has(ds))continue;let count=1;visited.add(ds);let fwd=addDays(new Date(ds+'T00:00:00'),1);while(set.has(localYMD(fwd))){visited.add(localYMD(fwd));count++;fwd=addDays(fwd,1)}let bwd=addDays(new Date(ds+'T00:00:00'),-1);while(set.has(localYMD(bwd))){visited.add(localYMD(bwd));count++;bwd=addDays(bwd,-1)}if(count>longest)longest=count}let comp=0,total=30;let dayPtr=new Date();for(let i=0;i<30;i++){if(set.has(localYMD(dayPtr)))comp+=1;dayPtr=addDays(dayPtr,-1)}const pct=total>0?Math.round(comp/total*100):0;const score=Math.round(Math.min(100,pct*0.7+(Math.min(cur,30)/30)*20+(Math.min(longest,60)/60)*10));elCur.textContent=String(cur);elLong.textContent=String(longest);elPct.textContent=pct+'%';elScore.textContent=String(score)}